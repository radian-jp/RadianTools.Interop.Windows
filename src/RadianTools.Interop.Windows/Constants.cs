using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RadianTools.Interop.Windows;

public enum DIB_COLORS
{
    DIB_RGB_COLORS = 0,
    DIB_PAL_COLORS = 1,
}

public enum KF_CATEGORY
{
    KF_CATEGORY_VIRTUAL = 1,
    KF_CATEGORY_FIXED = 2,
    KF_CATEGORY_COMMON = 3,
    KF_CATEGORY_PERUSER = 4,
}

public enum FFFP_MODE
{
    FFFP_EXACTMATCH = 0,
    FFFP_NEARESTPARENTMATCH = 1,
}

public enum GPFIDL_FLAGS : uint
{
    GPFIDL_DEFAULT = 0U,
    GPFIDL_ALTNAME = 1U,
    GPFIDL_UNCPRINTER = 2U,
}

public enum SHIL : uint
{
    LARGE = 0,
    SMALL,
    EXTRALARGE,
    SYSSMALL,
    JUMBO,
}

public enum STRRET_TYPE
{
    STRRET_WSTR = 0,
    STRRET_OFFSET = 1,
    STRRET_CSTR = 2,
}

[Flags]
public enum SHGDNF : uint
{
    SHGDN_NORMAL = 0U,
    SHGDN_INFOLDER = 1U,
    SHGDN_FOREDITING = 4096U,
    SHGDN_FORADDRESSBAR = 16384U,
    SHGDN_FORPARSING = 32768U,
}

[Flags]
public enum _SHCONTF
{
    SHCONTF_CHECKING_FOR_CHILDREN = 16,
    SHCONTF_FOLDERS = 32,
    SHCONTF_NONFOLDERS = 64,
    SHCONTF_INCLUDEHIDDEN = 128,
    SHCONTF_INIT_ON_FIRST_NEXT = 256,
    SHCONTF_NETPRINTERSRCH = 512,
    SHCONTF_SHAREABLE = 1024,
    SHCONTF_STORAGE = 2048,
    SHCONTF_NAVIGATION_ENUM = 4096,
    SHCONTF_FASTITEMS = 8192,
    SHCONTF_FLATLIST = 16384,
    SHCONTF_ENABLE_ASYNC = 32768,
    SHCONTF_INCLUDESUPERHIDDEN = 65536,
}

[Flags]
public enum SFGAO_FLAGS : uint
{
    SFGAO_CANCOPY = 0x00000001,
    SFGAO_CANMOVE = 0x00000002,
    SFGAO_CANLINK = 0x00000004,
    SFGAO_STORAGE = 0x00000008,
    SFGAO_CANRENAME = 0x00000010,
    SFGAO_CANDELETE = 0x00000020,
    SFGAO_HASPROPSHEET = 0x00000040,
    SFGAO_DROPTARGET = 0x00000100,
    SFGAO_CAPABILITYMASK = 0x00000177,
    SFGAO_PLACEHOLDER = 0x00000800,
    SFGAO_SYSTEM = 0x00001000,
    SFGAO_ENCRYPTED = 0x00002000,
    SFGAO_ISSLOW = 0x00004000,
    SFGAO_GHOSTED = 0x00008000,
    SFGAO_LINK = 0x00010000,
    SFGAO_SHARE = 0x00020000,
    SFGAO_READONLY = 0x00040000,
    SFGAO_HIDDEN = 0x00080000,
    SFGAO_DISPLAYATTRMASK = 0x000FC000,
    SFGAO_FILESYSANCESTOR = 0x10000000,
    SFGAO_FOLDER = 0x20000000,
    SFGAO_FILESYSTEM = 0x40000000,
    SFGAO_HASSUBFOLDER = 0x80000000,
    SFGAO_CONTENTSMASK = 0x80000000,
    SFGAO_VALIDATE = 0x01000000,
    SFGAO_REMOVABLE = 0x02000000,
    SFGAO_COMPRESSED = 0x04000000,
    SFGAO_BROWSABLE = 0x08000000,
    SFGAO_NONENUMERATED = 0x00100000,
    SFGAO_NEWCONTENT = 0x00200000,
    SFGAO_CANMONIKER = 0x00400000,
    SFGAO_HASSTORAGE = 0x00400000,
    SFGAO_STREAM = 0x00400000,
    SFGAO_STORAGEANCESTOR = 0x00800000,
    SFGAO_STORAGECAPMASK = 0x70C50008,
    SFGAO_PKEYSFGAOMASK = 0x81044000,
}

[Flags]
public enum FILE_FLAGS_AND_ATTRIBUTES : uint
{
    FILE_ATTRIBUTE_READONLY = 0x00000001,
    FILE_ATTRIBUTE_HIDDEN = 0x00000002,
    FILE_ATTRIBUTE_SYSTEM = 0x00000004,
    FILE_ATTRIBUTE_DIRECTORY = 0x00000010,
    FILE_ATTRIBUTE_ARCHIVE = 0x00000020,
    FILE_ATTRIBUTE_DEVICE = 0x00000040,
    FILE_ATTRIBUTE_NORMAL = 0x00000080,
    FILE_ATTRIBUTE_TEMPORARY = 0x00000100,
    FILE_ATTRIBUTE_SPARSE_FILE = 0x00000200,
    FILE_ATTRIBUTE_REPARSE_POINT = 0x00000400,
    FILE_ATTRIBUTE_COMPRESSED = 0x00000800,
    FILE_ATTRIBUTE_OFFLINE = 0x00001000,
    FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x00002000,
    FILE_ATTRIBUTE_ENCRYPTED = 0x00004000,
    FILE_ATTRIBUTE_INTEGRITY_STREAM = 0x00008000,
    FILE_ATTRIBUTE_VIRTUAL = 0x00010000,
    FILE_ATTRIBUTE_NO_SCRUB_DATA = 0x00020000,
    FILE_ATTRIBUTE_EA = 0x00040000,
    FILE_ATTRIBUTE_PINNED = 0x00080000,
    FILE_ATTRIBUTE_UNPINNED = 0x00100000,
    FILE_ATTRIBUTE_RECALL_ON_OPEN = 0x00040000,
    FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 0x00400000,
    FILE_FLAG_WRITE_THROUGH = 0x80000000,
    FILE_FLAG_OVERLAPPED = 0x40000000,
    FILE_FLAG_NO_BUFFERING = 0x20000000,
    FILE_FLAG_RANDOM_ACCESS = 0x10000000,
    FILE_FLAG_SEQUENTIAL_SCAN = 0x08000000,
    FILE_FLAG_DELETE_ON_CLOSE = 0x04000000,
    FILE_FLAG_BACKUP_SEMANTICS = 0x02000000,
    FILE_FLAG_POSIX_SEMANTICS = 0x01000000,
    FILE_FLAG_SESSION_AWARE = 0x00800000,
    FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000,
    FILE_FLAG_OPEN_NO_RECALL = 0x00100000,
    FILE_FLAG_FIRST_PIPE_INSTANCE = 0x00080000,
    PIPE_ACCESS_DUPLEX = 0x00000003,
    PIPE_ACCESS_INBOUND = 0x00000001,
    PIPE_ACCESS_OUTBOUND = 0x00000002,
    SECURITY_ANONYMOUS = 0x00000000,
    SECURITY_IDENTIFICATION = 0x00010000,
    SECURITY_IMPERSONATION = 0x00020000,
    SECURITY_DELEGATION = 0x00030000,
    SECURITY_CONTEXT_TRACKING = 0x00040000,
    SECURITY_EFFECTIVE_ONLY = 0x00080000,
    SECURITY_SQOS_PRESENT = 0x00100000,
    SECURITY_VALID_SQOS_FLAGS = 0x001F0000,
}

[Flags]
public enum SHGFI_FLAGS : uint
{
    SHGFI_ADDOVERLAYS = 0x00000020,
    SHGFI_ATTR_SPECIFIED = 0x00020000,
    SHGFI_ATTRIBUTES = 0x00000800,
    SHGFI_DISPLAYNAME = 0x00000200,
    SHGFI_EXETYPE = 0x00002000,
    SHGFI_ICON = 0x00000100,
    SHGFI_ICONLOCATION = 0x00001000,
    SHGFI_LARGEICON = 0x00000000,
    SHGFI_LINKOVERLAY = 0x00008000,
    SHGFI_OPENICON = 0x00000002,
    SHGFI_OVERLAYINDEX = 0x00000040,
    SHGFI_PIDL = 0x00000008,
    SHGFI_SELECTED = 0x00010000,
    SHGFI_SHELLICONSIZE = 0x00000004,
    SHGFI_SMALLICON = 0x00000001,
    SHGFI_SYSICONINDEX = 0x00004000,
    SHGFI_TYPENAME = 0x00000400,
    SHGFI_USEFILEATTRIBUTES = 0x00000010,
}

public static class FileSystem
{
    public const int MAX_PATH = 260;
}

public static class FOLDERID
{
    public static readonly Guid Computer = new Guid(0x0AC0837C, 0xBBF8, 0x452A, 0x85, 0x0D, 0x79, 0xD0, 0x8E, 0x66, 0x7C, 0xA7);
    public static readonly Guid Desktop = new Guid(0xB4BFCC3A, 0xDB2C, 0x424C, 0xB0, 0x29, 0x7F, 0xE9, 0x9A, 0x87, 0xC6, 0x41);
    public static readonly Guid NetworkFolder = new Guid(0xD20BEEC4, 0x5CA8, 0x4905, 0xAE, 0x3B, 0xBF, 0x25, 0x1E, 0xA0, 0x9B, 0x53);
    public static readonly Guid UsersLibraries = new Guid(0xA302545D, 0xDEFF, 0x464B, 0xAB, 0xE8, 0x61, 0xC8, 0x64, 0x8D, 0x93, 0x9B);
    public static readonly Guid UsersFiles = new Guid(0xF3CE0F7C, 0x4901, 0x4ACC, 0x86, 0x48, 0xD5, 0xD4, 0x4B, 0x04, 0xEF, 0x8F);
}

public class KnownFolderPIDL
{
    public static readonly Lazy<SafePIDL> Desktop = new(() => GetKnownFolderPIDL(FOLDERID.Desktop));
    public static readonly Lazy<SafePIDL> NetworkFolder = new(() => GetKnownFolderPIDL(FOLDERID.NetworkFolder));
    public static readonly Lazy<SafePIDL> UsersLibraries = new(() => GetKnownFolderPIDL(FOLDERID.UsersLibraries));
    public static readonly Lazy<SafePIDL> UsersFiles = new(GetKnownFolderPIDL(FOLDERID.UsersFiles));

    public static SafePIDL GetKnownFolderPIDL(in Guid rfid)
    {
        var hr = Shell32.SHGetKnownFolderIDList(in rfid, 0, HANDLE.Null, out var pidl);
        return hr.IsOK ? new SafePIDL(pidl, false) : SafePIDL.Null;
    }
}
